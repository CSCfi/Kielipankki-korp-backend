#! /usr/local/bin/python
# -*- mode: Python; -*-

# A simple authentication and authorization database management tool
# to support Korp configuration with CLARIN access classes; to go with
# an auth.cgi in backend/korp/. Python 2.7 (because it's what the Korp
# frontend is). By Jussi Piitulainen, jpiitula@ling.helsinki.fi, for
# FIN-CLARIN, December 2013.

from __future__ import print_function

import MySQLdb
import sys, codecs, re

DBUSER = 'ling'
DBPASS = 'PASSWORD_PLACEHOLDER'
DBNAME = 'korp_auth'

# For testing whether there is a compatible limited_access setting
# (and no incompatible limited_access settings) in the frontend.
CONFIG = { '/var/www/html/config.js',
           '/var/www/html/modes/parallel_mode.js',
}

def usage_command(cursor, command, args):
    print('''\
Usage: ./auth command [arg [arg]]

PERSON is the login identifier in HTTP Basic Authentication
CORPUS is the Corpus Workbench Name of a corpus in Korp

./auth promote PERSON        make person ACA (idempotent)
./auth demote PERSON         make person NOT ACA (idempotent)
./auth remove PERSON         remove person (idempotent)
./auth secret PERSON         update "secret" for person (prompts for it)

./auth allow PERSON CORPUS   give person personal access to corpus
./auth deny PERSON CORPUS    take away from person personal access to corpus

./auth PUB CORPUS            make corpus PUB
./auth ACA CORPUS            make corpus ACA
./auth RES CORPUS            make corpus RES
Note: ACA and RES corpora need also be configured limited_access=true,
and PUB corpora, not (that's an attribute specification in config.js
of Korp front end)

./auth persons               list persons and their "secret" passwords
./auth corpora               list corpora and their licenses
    ''')

def promote_command(cursor, command, args):
    '''Make person ACA (idempotent)'''
    person, = args
    cursor.execute('''
    insert into auth_academic(person)
    values (%s)
    on duplicate key
    update person = person''', [person])

def demote_command(cursor, command, args):
    '''Make person NOT ACA (idempotent)'''
    person, = args
    cursor.execute('''
    delete from auth_academic
    where person = %s''', [person])

def secret_command(cursor, command, args):
    '''Update HTTP Basic Authentication password of person'''
    from getpass import getpass
    person, = args
    secret = getpass('New password for %s: ' % person)
    cursor.execute('''
    insert into auth_secret(person, secret)
    values (%s, %s)
    on duplicate key
    update secret = %s''', [person, secret, secret])

def remove_command(cursor, command, args):
    '''Remove person'''
    person, = args
    cursor.execute('''
    delete from auth_academic where person = %s''', [person])
    cursor.execute('''
    delete from auth_secret where person = %s''', [person])

def allow_command(cursor, command, args):
    '''Give person personal access to corpus'''
    person, corpus = args
    cursor.execute('''
    insert into auth_allow(person, corpus)
    values (%s, %s)
    on duplicate key
    update corpus = corpus''', [person, corpus])

def deny_command(cursor, command, args):
    '''Take away personal access to corpus from person'''
    person, corpus = args
    cursor.execute('''
    delete from auth_allow
    where person = %s and corpus = %s''', [person, corpus])

def license_command(cursor, command, args):
    '''Make corpus be of given type (PUB, ACA, or RES)'''
    license = command
    corpus, = args
    cursor.execute('''
    insert into auth_license(corpus, license)
    values (%s, %s)
    on duplicate key
    update license = %s''', [corpus, license, license])
    check_config(corpus, license)

def persons_command(cursor, command, args):
    '''List persons, their "secret" passwords if any, their ACA status as
    recorded in this authentication service (RES if not ACA), and
    their personally allowed corpora'''
    cursor.execute('''
    (select person from auth_secret)
    union (select person from auth_allow)
    union (select person from auth_academic)
    order by person''')
    for person, in cursor.fetchall():
        print(person, end='')
        cursor.execute('''
        select secret from auth_secret
        where person = %s''', [person])
        secret = cursor.fetchone()
        if secret: print(':%s' % secret[0], end='')
        cursor.execute('''
        select person from auth_academic
        where person = %s''', [person])
        print('', ('-ACA', '+ACA')[bool(cursor.fetchone())], end='')
        cursor.execute('''
        select corpus from auth_allow
        where person = %s
        order by corpus''', [person])
        for corpus in cursor: print(' ', corpus[0], end='')
        print()

def corpora_command(cursor, command, args):
    '''List corpora, their license (PUB, ACA, or RES), and their corporal
    persons (persons allowed personal access to the corpus)'''
    cursor.execute('''
    select corpus, license from auth_license
    order by corpus''')
    for corpus, license in cursor.fetchall():
        print(corpus, license, end='')
        cursor.execute('''
        select person from auth_allow
        where corpus = %s
        order by person''', [corpus])
        for person, in cursor:
            print('', person, end='')
        print()
        check_config(corpus, license)

dispatch = dict(promote = promote_command,
                demote = demote_command,
                remove = remove_command,
                secret = secret_command,
                allow = allow_command,
                deny = deny_command,
                PUB = license_command,
                ACA = license_command,
                RES = license_command,
                persons = persons_command,
                corpora = corpora_command,
                help = usage_command)

def check_config(corpus, license):
    '''Reports on possible incompatibilities with frontend config files.
    Note! This does not cover all possibilities - if something is not
    found, the problems may well be in this function instead of in the
    config files.'''

    found_containing = []
    for config in CONFIG:
        text = codecs.open(config, 'r', 'utf-8').read()
        matches = re.findall(r'\bsettings.corpora.%s\s*=\s*[{].*?[{}]'
                             % corpus.lower(),
                             text, flags = re.MULTILINE | re.DOTALL)
        if len(matches) > 0:
            found_containing.append(config)

        if len(matches) > 1:
            print('! %s: found many in %s' % (corpus, config))

        for match in matches:
            limitations = re.findall(r'\blimited_access\s*:\s*(\w+)',
                                     match, re.MULTILINE | re.DOTALL)
            if len(limitations) > 1:
                print('! %s: multiply limited in %s'
                      % (corpus, config))

            if license in ('ACA', 'RES') and not limitations:
                print('! %s: missing limitation in %s'
                      % (corpus, config))

            if license in ('ACA', 'RES'):
                for limitation in limitations:
                    if limitation == 'false':
                        print('! %s: incompatible non-limitation in %s'
                              % (corpus, config))
            else:
                for limitation in limitations:
                    if limitation == 'true':
                        print('! %s: incompatible limitation in %s'
                              % (corpus, config))

    if len(found_containing) == 0:
        print('! %s: not found in any config file' % corpus)

    if len(found_containing) > 1:
        print('! %s: found in more than one config file: %s'
              % (corpus, ' '.join(found_containing)))

if __name__ == '__main__':
    conn = MySQLdb.connect(host = "localhost",
                           user = DBUSER,
                           passwd = DBPASS,
                           db = DBNAME,
                           use_unicode = True,
                           charset = "utf8")
    try:
        cursor = conn.cursor()
        command, args = sys.argv[1], sys.argv[2:]
        dispatch.get(command, usage_command)(cursor, command, args)
        cursor.close()
        conn.commit()
    except:
        import traceback
        traceback.print_exc(2)
        print()
        print('Try "./auth help" for usage')
