#! /usr/bin/env python


import sys
import re
import csv


def process_log(stream):
    out_fields = [
        'start_date',
        'start_time',
        'ip',
        'query_corpora',
        'result_count',
        'result_corpora',
    ]
    csv.field_size_limit(int(1e7))
    log_reader = csv.DictReader(stream, delimiter='\t', quoting=csv.QUOTE_NONE)
    out_writer = csv.DictWriter(sys.stdout, out_fields, delimiter='\t',
                                quoting=csv.QUOTE_NONE, extrasaction='ignore')
    for fields in log_reader:
        if fields.get('command') == 'query':
            try:
                params = eval(fields.get('params', '{}'))
                hits = eval(fields.get('hits', '{}'))
            except SyntaxError:
                continue
            fields['query_corpora'] = params.get('corpus', '')
            if not hits or not fields['query_corpora']:
                continue
            corpora = fields['query_corpora']
            if not isinstance(fields['query_corpora'], list):
                corpora = corpora.split(',')
            try:
                fields['start'] = int(params.get('start', 0))
                fields['end'] = int(params.get('end', 24))
            except (ValueError, TypeError):
                continue
            fields['result_corpora'] = calc_corpus_hits(
                hits, corpora, fields['start'], fields['end'])
            out_writer.writerow(fields)


def calc_corpus_hits(corpus_hits, corpora, start, end):
    cum_hits = cum_hits_prev = included_hits = 0
    start += 1
    end += 1
    count = end - start + 1
    result_hits = []
    for corpus in corpora:
        this_corpus_hits = corpus_hits.get(corpus, 0)
        cum_hits += this_corpus_hits
        # print start, end, corpus, cum_hits_prev, this_corpus_hits, cum_hits, included_hits,
        if cum_hits >= start and this_corpus_hits > 0:
            included_corpus_hits = this_corpus_hits
            if cum_hits > end:
                # print "A1",
                included_corpus_hits -= cum_hits - end
            if cum_hits_prev < start:
                # print "A2",
                included_corpus_hits -= start - cum_hits_prev - 1
            result_hits.append((corpus, included_corpus_hits))
            included_hits += included_corpus_hits
            # print included_corpus_hits, included_hits,
        # print
        if cum_hits >= end:
            break
        cum_hits_prev = cum_hits
    return ','.join('{corp}:{hits:d}'.format(corp=corp, hits=hits)
                    for corp, hits in result_hits)


def test_calc_corpus_hits():
    hits = {'a': 1, 'b': 2, 'c': 0, 'd': 3, 'e': 5}
    corpora = ['a', 'b', 'c', 'd', 'e']
    start_end_result = [
        (0, 0, 'a:1'),
        (0, 1, 'a:1 b:1'),
        (0, 2, 'a:1 b:2'),
        (0, 3, 'a:1 b:2 d:1'),
        (1, 2, 'b:2'),
        (1, 5, 'b:2 d:3'),
        (2, 4, 'b:1 d:2'),
        (3, 10, 'd:3 e:5'),
        (6, 10, 'e:5'),
        (7, 10, 'e:4'),
        (7, 11, 'e:4'),
        (11, 20, ''),
    ]
    for start, end, result in start_end_result:
        assert calc_corpus_hits(hits, corpora, start, end) == result, (
            repr((start, end, result)))


def main():
    # test_calc_corpus_hits()
    if len(sys.argv) > 1:
        for fname in sys.argv[1:]:
            with open(fname, 'r') as f:
                process_log(f)
    else:
        process_log(sys.stdin)


if __name__ == '__main__':
    main()
