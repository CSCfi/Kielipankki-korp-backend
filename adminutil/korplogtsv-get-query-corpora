#! /usr/bin/env python2


import sys
import re
import csv

# Requires Python 2.7
from argparse import ArgumentParser
# Requires Python 2.7
from collections import OrderedDict

import korplog_util as util


class KorpLogCorporaGetter(object):

    def __init__(self, extra_fields):
        # self.test_calc_corpus_hits()
        self._extra_fields = extra_fields.split()

    def process_log(self, args):
        if len(args) > 0:
            for fname in args:
                with open(fname, 'r') as f:
                    self._process_log(f)
        else:
            self._process_log(sys.stdin)

    def _process_log(self, stream):

        def format_result_corpora(corpus_hits):
            return ','.join('{corp}:{hits:d}'.format(corp=corp, hits=hits)
                            for corp, hits in corpus_hits)

        out_fields = [
            'start_date',
            'start_time',
            'ip',
            'query_corpora',
            'result_count',
            'result_corpora',
        ] + self._extra_fields
        csv.field_size_limit(int(1e7))
        log_reader = csv.DictReader(stream, delimiter='\t',
                                    quoting=csv.QUOTE_NONE)
        sys.stdout.write('\t'.join(out_fields) + '\n')
        out_writer = csv.DictWriter(sys.stdout, out_fields, delimiter='\t',
                                    quoting=csv.QUOTE_NONE,
                                    extrasaction='ignore')
        for fields in log_reader:
            if fields.get('command') == 'query':
                try:
                    params = eval(fields.get('params', '{}'))
                    hits = eval(fields.get('hits', '{}'))
                except SyntaxError:
                    continue
                hits = dict((corp.lower(), hitcnt)
                            for corp, hitcnt in hits.iteritems())
                # The value of the parameter "corpus" can be either a
                # string of corpora (separated by commas) or a list,
                # which adds some extra work.
                fields['query_corpora'] = util.decode_list_param(
                    params.get('corpus', ''))
                if not hits or not fields['query_corpora']:
                    continue
                corpora = fields['query_corpora']
                if not isinstance(fields['query_corpora'], list):
                    corpora = corpora.split(',')
                corpora = [corp.lower() for corp in corpora]
                try:
                    fields['start'] = int(params.get('start', 0))
                    fields['end'] = int(params.get('end', 24))
                except (ValueError, TypeError):
                    continue
                result_corpora_hits = self._calc_corpus_hits(
                    hits, corpora, fields['start'], fields['end'])
                fields['query_corpora'] = ','.join(corpora)
                fields['result_corpora'] = format_result_corpora(
                    result_corpora_hits)
                out_writer.writerow(fields)

    def _calc_corpus_hits(self, corpus_hits, corpora, start, end):
        # No negative numbers of hits (start can be greater than end
        # in direct Korp API queries)
        if start > end:
            return []
        cum_hits = cum_hits_prev = included_hits = 0
        start += 1
        end += 1
        count = end - start + 1
        result_hits = []
        for corpus in corpora:
            this_corpus_hits = corpus_hits.get(corpus, 0)
            cum_hits += this_corpus_hits
            # print start, end, corpus, cum_hits_prev, this_corpus_hits, cum_hits, included_hits,
            if cum_hits >= start and this_corpus_hits > 0:
                included_corpus_hits = this_corpus_hits
                if cum_hits > end:
                    # print "A1",
                    included_corpus_hits -= cum_hits - end
                if cum_hits_prev < start:
                    # print "A2",
                    included_corpus_hits -= start - cum_hits_prev - 1
                result_hits.append((corpus, included_corpus_hits))
                included_hits += included_corpus_hits
                # print included_corpus_hits, included_hits,
            # print
            if cum_hits >= end:
                break
            cum_hits_prev = cum_hits
        return result_hits

    def test_calc_corpus_hits(self):
        hits = {'a': 1, 'b': 2, 'c': 0, 'd': 3, 'e': 5}
        corpora = ['a', 'b', 'c', 'd', 'e']
        start_end_result = [
            (0, 0, 'a:1'),
            (0, 1, 'a:1 b:1'),
            (0, 2, 'a:1 b:2'),
            (0, 3, 'a:1 b:2 d:1'),
            (1, 2, 'b:2'),
            (1, 5, 'b:2 d:3'),
            (2, 4, 'b:1 d:2'),
            (3, 10, 'd:3 e:5'),
            (6, 10, 'e:5'),
            (7, 10, 'e:4'),
            (7, 11, 'e:4'),
            (11, 20, ''),
        ]
        for start, end, result in start_end_result:
            assert calc_corpus_hits(hits, corpora, start, end) == result, (
                repr((start, end, result)))


def getargs():
    argparser = ArgumentParser(
        description="""
            Extract query commands and the associated corpora from a
            Korp backend log cconverted to TSV format.
        """)
    argparser.add_argument(
        'logfile', nargs='*',
        help='input Korp log file(s) in TSV format (default: stdin)')
    argparser.add_argument(
        '--extra-fields', metavar='fieldnamelist', default='',
        help="""also output the fields listed in the space-separated
                fieldnamelist""")
    return argparser.parse_args()


def main():
    args = getargs()
    log_processor = KorpLogCorporaGetter(args.extra_fields)
    log_processor.process_log(args.logfile)


if __name__ == '__main__':
    main()
