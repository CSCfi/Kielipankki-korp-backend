#! /usr/bin/env python


# Compute monthly and yearly totals by corpus (and corpus group) of
# - number of queries
# - number of unique IPs for queries
# - number of results
# - number of unique IPs for results
# - number of result hits.
#
# For each number, include total, those from Finnish IPs and those
# from others.


import sys
import csv
import re

from collections import defaultdict


class StatsCell(object):

    def __init__(self, type_=int):
        self._value = {'fi': type_(), 'other': type_()}

    def add(self, value, country):
        self._add('fi' if country == 'FI' else 'other', value)

    def _add(self, key, value):
        self._value[key] += value

    def getvalue(self):
        values = dict((key, self._getvalue(key))
                      for key in self._value.iterkeys())
        values['total'] = sum(val for val in values.itervalues())
        return values

    def _getvalue(self, key):
        return self._value[key]

    def __repr__(self):
        return repr(self._value)


class StatsCellUnique(StatsCell):

    def __init__(self):
        super(StatsCellUnique, self).__init__(set)

    def _add(self, key, value):
        self._value[key].add(value)

    def _getvalue(self, key):
        return len(self._value[key])


class Table(list):

    def __init__(self, val=None):
        super(Table, self).__init__(val or [])
        self._format = dict((key, defaultdict(str))
                            for key in ['row', 'col', 'cell'])
        self._formats_propagated = True
        self._headings = dict((key, set()) for key in ['row', 'col', 'cell'])
        self._cell_spans = dict()

    def add_row(self, row=None, heading=False, fmt=None):
        self.append(row or [])
        if heading:
            self._headings['row'].add(len(self) - 1)
        if fmt:
            self.add_format(fmt, 'row')

    def add_cell(self, cell, heading=False, fmt=None, colspan=1):
        if len(self) == 0:
            self.add_row()
        self[-1].append(cell)
        index = (len(self) - 1, len(self[-1]) - 1)
        if heading:
            self._headings['cell'].add(index)
        if fmt:
            self.add_format(fmt, 'cell')
        if colspan != 1:
            self._cell_spans[index] = (1, colspan)
        # print "add_cell", cell, self

    def extend_row(self, new_cells, heading=False, fmt=None):
        if len(self) == 0:
            self.add_row()
        self[-1].extend(new_cells)
        rownum = len(self) - 1
        if heading:
            self._headings['row'].add(rownum)
        if fmt:
            lastcol = len(self[-1]) - 1
            for colnum0 in xrange(len(new_cells)):
                self.add_format(fmt, 'cell', (rownum, lastcol - colnum0))
        # print "extend_row", new_cells, self

    def add_format(self, fmt, type_='cell', index=None):
        if index is None:
            if type_ == 'row':
                index = len(self) - 1
            elif type_ == 'cell':
                index = (len(self) - 1, len(self[-1]) - 1)
            else:
                index = len(self[-1]) - 1
        self._format[type_][index] = fmt
        if type_ != 'cell':
            self._formats_propagated = False

    def get_cell_format(self, rownum, colnum):
        return (self._format['cell'].get((rownum, colnum))
                or self._format['col'].get(colnum)
                or self._format['row'].get(rownum))

    def is_heading_cell(self, rownum, colnum):
        return (rownum in self._headings['row']
                or colnum in self._headings['col']
                or (rownum, colnum) in self._headings['cell'])

    def format_tsv(self):
        return '\n'.join('\t'.join(cell for cell in row) for row in self) + '\n'

    def format_html(self):

        def elem(name, val, attrs=None):
            return '<{name}{attrs}>{val}</{name}>'.format(
                name=name, val=val, attrs=format_attrs(attrs))

        def format_attrs(attrlist):
            return ''.join(' {name}="{val}"'.format(name=name, val=val)
                           for name, val in attrlist or [])

        def elems(name, vals, joiner=''):
            return joiner.join(elem(name, val) for val in vals)

        self._propagate_formats()
        html_rows = []
        for rownum, row in enumerate(self):
            html_cells = []
            for colnum, cell in enumerate(row):
                elem_name = (
                    'th' if self.is_heading_cell(rownum, colnum) else 'td')
                attrs = []
                fmt = self.get_cell_format(rownum, colnum)
                if fmt:
                    attrs.append(('class', fmt))
                spans = self._cell_spans.get((rownum, colnum))
                if spans:
                    for index, spantype in enumerate(['rowspan', 'colspan']):
                        if spans[index] != 1:
                            attrs.append((spantype, str(spans[index])))
                html_cells.append(elem(elem_name, cell, attrs))
            html_rows.append(
                elem('tr', ''.join(html_cells),
                     [('class', self._format['row'].get(rownum))])
                + '\n')
        return elem('table', ''.join(html_rows)) + '\n'

    def _propagate_formats(self):
        if self._formats_propagated:
            return
        for row, fmt in self._format['row'].iteritems():
            for col in xrange(len(self[row])):
                self._format['cell'].setdefault((row, col), fmt)
        for col, fmt in self._format['col'].iteritems():
            for row in self:
                self._format['cell'].setdefault((row, col), fmt)
        self._formats_propagated = True


class Stats(object):

    class Stat(object):

        def __init__(self, stats_spec, get_addvalue_fn_map):
            self._spec = stats_spec
            cell_class = (
                StatsCellUnique if stats_spec.get('type') == 'ip_counter'
                else StatsCell)
            self._cells = defaultdict(lambda: defaultdict(cell_class))
            self._corpus_field = (stats_spec.get('corpus_field')
                                  or 'query_corpora')
            self._get_addvalue = get_addvalue_fn_map[
                stats_spec.get('type') or 'counter']

        def add(self, row, col, fields, corpus):
            self._cells[row][col].add(self._get_addvalue(fields, corpus),
                                      fields['ip_country'])

        def get(self, row, col):
            return self._cells.get(row, {}).get(col)

        def get_attr(self, name):
            return self._spec.get(name)

        def has_row(self, row):
            return row in self._cells

        def get_corpus_field(self, fields):
            return fields[self._corpus_field + '_groups']

    def __init__(self, stats_specs):
        get_addvalue_fn_map = {
            'counter': self._get_addvalue_counter,
            'ip_counter': self._get_addvalue_ip_counter,
            'hit_summer': self._get_addvalue_hit_summer,
        }
        self._stats = [self.Stat(stats_spec, get_addvalue_fn_map)
                       for stats_spec in stats_specs]
        self._statsdict = dict(
            (stats_specs[statnum]['name'], self._stats[statnum])
            for statnum, stat in enumerate(self._stats))
        self._years = set()
        self._months = defaultdict(set)
        self._corpora = set()
        self._hit_counts = {}
        self._first_date = '9999-99-99'
        self._last_date = '0000-00-00'

    def _get_addvalue_counter(self, fields, corpus):
        return 1

    def _get_addvalue_ip_counter(self, fields, corpus):
        return fields['ip']

    def _get_addvalue_hit_summer(self, fields, corpus):
        return self._hit_counts.get(corpus, 0)

    def add(self, fields):
        start_date = fields['start_date']
        year = start_date[:4]
        month = start_date[:7]
        if start_date < self._first_date:
            self._first_date = start_date
        if start_date > self._last_date:
            self._last_date = start_date
        self._years.add(year)
        self._months[year].add(month)
        self._hit_counts = {}
        for stat in self._stats:
            corpora = set(self._get_corpora(stat.get_corpus_field(fields)))
            self._corpora |= corpora
            for corp in corpora:
                for row in [corp, 'Total']:
                    for col in [year, month, 'Total']:
                        stat.add(row, col, fields, corp)

    def _get_corpora(self, corplist):
        corpora = []
        for corp_group_hits in corplist.split(','):
            corp_group, _, group_hits = corp_group_hits.partition(':')
            if corp_group == '':
                continue
            if '[' in corp_group:
                corp_group = corp_group.rstrip(']')
                group, group_corp = corp_group.split('[')
                corpora.append('*' + group)
                for corp_maybe_hits in group_corp.split('+'):
                    corp, _, corp_hits = corp_maybe_hits.partition('/')
                    base_corp = corp.split('|')
                    corpora.extend(group + ':' + corp0 for corp0 in base_corp)
                    if corp_hits:
                        self._hit_counts.update(
                            dict((group + ':' + corp0, int(corp_hits))
                                 for corp0 in base_corp))
                if group_hits:
                    self._hit_counts['*' + group] = int(group_hits)
            else:
                corpora.extend(corp_group.split('|'))
            if group_hits:
                self._hit_counts[corp_group] = int(group_hits)
        return corpora

    def make_table(self, stat_name, groups_only=False, totals_first=False,
                   include_empty_rows=False):
        stat = self._statsdict.get(stat_name)
        if stat is None:
            return ''

        def get_row_class(corp):
            return None if ':' in corp else 'group'

        table = Table()
        table.add_row([''], heading=True, fmt='colhead')
        cols = []
        for year in self._years:
            cols_year = sorted(self._months[year])
            if len(self._years) > 1 or len(self._months[year]) > 1:
                self._add_totals_label(cols_year, year, totals_first)
            cols.extend(cols_year)
        if len(self._years) > 1:
            self._add_totals_label(cols, 'Total', totals_first)
        for col in cols:
            table.add_cell(col, colspan=3)
        self._table_add_col_subheads(table, len(cols))
        corpora = self._make_corpus_list(groups_only, totals_first)
        for corp in corpora:
            if not include_empty_rows and not stat.has_row(corp):
                continue
            table.add_row(fmt=get_row_class(corp))
            table.add_cell(self._make_corpus_label(corp), heading=True)
            for col in cols:
                table.extend_row(self._get_values(stat, corp, col),
                                 fmt=('total' if corp == 'Total' else None))
        return table

    def _make_corpus_list(self, groups_only=False, totals_first=False):

        def corpus_key(corp):
            return corp.lstrip('*') + '\x7f' if corp.startswith('*') else corp

        def corpus_key_totals_first(corp):
            return corp.lstrip('*')

        corpora = ([corp for corp in self._corpora if ':' not in corp]
                   if groups_only else list(self._corpora))
        corpora.sort(key=(corpus_key_totals_first if totals_first
                          else corpus_key))
        self._add_totals_label(corpora, 'Total', totals_first)
        return corpora

    def _table_add_col_subheads(self, table, col_group_count):
        table.add_row([''], heading=True, fmt='colhead2')
        # TODO: Make the order depend on whether totals should be
        # first or last
        table.extend_row(['Total', 'Finland', 'Other'] * col_group_count)

    def _make_corpus_label(self, corp):
        return re.sub(r'.*:', ' - ', corp)

    def _get_values(self, stat, corp, date):
        cell = stat.get(corp, date)
        if cell:
            values = cell.getvalue()
            return [self._format_int(values[key])
                    for key in ['total', 'fi', 'other']]
        else:
            return ['', '', '']

    def _format_int(self, val):
        return '{0:,}'.format(val).replace(',', '&#8239;')

    def _add_totals_label(self, lst, label, totals_first=False):
        if totals_first:
            lst[0:0] = [label]
        else:
            lst.append(label)

    def make_summary_table(self, totals_first=False):
        table = Table()
        table.add_row([''], heading=True, fmt='colhead')
        for stat in self._stats:
            table.add_cell(stat.get_attr('title_short'), colspan=3)
        self._table_add_col_subheads(table, len(self._stats))
        corpora = self._make_corpus_list(groups_only=True,
                                        totals_first=totals_first)
        for corp in corpora:
            table.add_row(fmt='group')
            table.add_cell(self._make_corpus_label(corp), heading=True)
            for stat in self._stats:
                table.extend_row(self._get_values(stat, corp, 'Total'),
                                 fmt=('total' if corp == 'Total' else None))
        return table

    def get_date_range(self):
        return self._first_date + '/' + self._last_date

    def __repr__(self):
        return repr(self._cells)


class KorpLogSummarizer(object):

    _stats_base = [
        ('query', 'Number of KWIC queries to corpus', 'Queries', 'counter',
         'query_corpora'),
        ('query_ip', 'Number of unique IP addresses for KWIC queries to corpus',
         'IPs for queries', 'ip_counter', 'query_corpora'),
        ('results', 'Number of KWIC queries with results retrieved from corpus',
         'Results', 'counter', 'result_corpora'),
        ('results_ip',
         ('Number of unique IP addresses for KWIC queries with results'
          ' retrieved from corpus'),
         'IPs for results', 'ip_counter', 'result_corpora'),
        ('result_hits', 'Number of KWIC result hits retrieved from corpus',
         'Result hits', 'hit_summer', 'result_corpora'),
    ]
    _stats_spec_keys = ['name', 'title', 'type', 'corpus_field']
    _stats_specs = []
    for stats_base_spec in _stats_base:
        _stats_specs.append(dict(name=stats_base_spec[0],
                                 title=stats_base_spec[1],
                                 title_short=stats_base_spec[2],
                                 type=stats_base_spec[3],
                                 corpus_field=stats_base_spec[4]))
    # Why doesn't the following work?
    # _stats_specs = [dict((key, stats_base_spec[keynum])
    #                      for keynum, key in enumerate(_stats_spec_keys))
    #                 for stats_base_spec in _stats_base]

    def __init__(self):
        self._stats = Stats(self._stats_specs)

    def process_log(self, args):
        if len(args) > 0:
            for fname in args:
                with open(fname, 'r') as f:
                    self._process_log(f)
        else:
            self._process_log(sys.stdin)
        self._output_html()

    def _process_log(self, stream):
        csv.field_size_limit(int(1e7))
        log_reader = csv.DictReader(stream, delimiter='\t',
                                    quoting=csv.QUOTE_NONE)
        for fields in log_reader:
            self._stats.add(fields)

    def _output_html(self):
        sys.stdout.write(
"""<!DOCTYPE html>
<html>
<head>
<style>
body {
  font-family: Arial, Helvetical, sans-serif;
}
h1 {
  margin-bottom: 1em;
}
h2 {
  margin-top: 2em;
  margin-bottom: 1em;
}
h3 {
  margin-top: 2em;
  margin-bottom: 1em;
}
table {
  border-collapse: collapse;
  border-top: 2px solid;
  border-bottom: 2px solid;
}
th {
  text-align: left;
  font-weight: normal;
}
th.colhead {
  font-weight: bold;
  padding-right: 1.5em;
}
th.colhead2 {
  font-style: italic;
  border-bottom: 1px solid;
  padding-bottom: 0.25em;
}
tr.group th {
  font-weight: bold;
}
td:nth-of-type(3n) {
  padding-right: 1.5em;
}
td {
  text-align: right;
}
td.total {
  font-weight: bold;
  padding-left: 0.5em;
}
</style>
</head>
<body>
""")
        sys.stdout.write('<h1>Korp usage statistics for '
                         + self._stats.get_date_range() + '</h1>\n')
        sys.stdout.write('<h2>Summary</h2>\n')
        sys.stdout.write(self._stats.make_summary_table(totals_first=True)
                         .format_html() + '\n')
        for title, groups_only in [('By top-level corpora', True),
                                   ('By corpora and subcorpora', False)]:
            sys.stdout.write('<h2>' + title + '</h2>\n')
            for stats_spec in self._stats_specs:
                sys.stdout.write('<h3>' + stats_spec['title'] + '</h3>\n')
                sys.stdout.write(
                    self._stats.make_table(
                        stats_spec['name'], groups_only=groups_only,
                        totals_first=True)
                    .format_html()
                    + '\n')
        sys.stdout.write("""
</body>
</html>
""")


def main():
    log_processor = KorpLogSummarizer()
    log_processor.process_log(sys.argv[1:])


if __name__ == '__main__':
    main()
