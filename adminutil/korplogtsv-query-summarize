#! /usr/bin/env python


# Compute monthly and yearly totals by corpus (and corpus group) of
# - number of queries
# - number of unique IPs for queries
# - number of results
# - number of unique IPs for results
# - number of result hits.
#
# For each number, include total, those from Finnish IPs and those
# from others.


import sys
import csv
import re

from collections import defaultdict


class StatsCell(object):

    def __init__(self, type_=int):
        self._value = {'fi': type_(), 'other': type_()}

    def add(self, value, country):
        self._add('fi' if country == 'FI' else 'other', value)

    def _add(self, key, value):
        self._value[key] += value

    def getvalue(self):
        values = dict((key, self._getvalue(key))
                      for key in self._value.iterkeys())
        values['total'] = sum(val for val in values.itervalues())
        return values

    def _getvalue(self, key):
        return self._value[key]

    def __repr__(self):
        return repr(self._value)


class StatsCellUnique(StatsCell):

    def __init__(self):
        super(StatsCellUnique, self).__init__(set)

    def _add(self, key, value):
        self._value[key].add(value)

    def _getvalue(self, key):
        return len(self._value[key])


class Table(list):

    def add_row(self, row=None):
        self.append(row or [])
        self._format = dict((key, defaultdict(str))
                            for key in ['row', 'col', 'cell'])

    def add_cell(self, cell):
        if len(self) == 0:
            self.add_row()
        self[-1].append(cell)
        # print "add_cell", cell, self

    def extend_row(self, new_cells):
        if len(self) == 0:
            self.add_row()
        self[-1].extend(new_cells)
        # print "extend_row", new_cells, self

    def add_format(self, fmt, type_='cell', index=None):
        if index is None:
            if type_ == 'row':
                index = len(self) - 1
            elif type_ == 'cell':
                index = (len(self) - 1, len(self[-1]) - 1)
            else:
                index = len(self[-1]) - 1
        self._format[type_][index] = fmt

    def format_tsv(self):
        return '\n'.join('\t'.join(cell for cell in row) for row in self) + '\n'

    def format_html(self):

        def elem(name, val):
            return '<{name}>{val}</{name}>'.format(name=name, val=val)

        def elems(name, vals, joiner=''):
            return joiner.join(elem(name, val) for val in vals)

        return elem('table',
                    elem('tr', elems('th', self[0])) + '\n'
                    + elems('tr', (elem('th', row[0]) + elems('td', row[1:])
                                   for row in self[1:]),
                            '\n')
                ) + '\n'


class Stats(object):

    def __init__(self, cell_class=StatsCell, corpus_field=None):
        self._cells = defaultdict(lambda: defaultdict(cell_class))
        self._corpus_field = corpus_field or 'query_corpora'
        self._years = set()
        self._months = defaultdict(set)
        self._corpora = set()
        self._hit_counts = {}
        self._first_date = '9999-99-99'
        self._last_date = '0000-00-00'

    def add(self, fields):
        start_date = fields['start_date']
        year = start_date[:4]
        month = start_date[:7]
        if start_date < self._first_date:
            self._first_date = start_date
        if start_date > self._last_date:
            self._last_date = start_date
        self._years.add(year)
        self._months[year].add(month)
        corpora = set(self._get_corpora(fields[self._corpus_field + '_groups']))
        self._corpora |= corpora
        for corp in corpora:
            for row in [corp, 'Total']:
                for col in [year, month, 'Total']:
                    self._cells[row][col].add(self._get_addvalue(fields, corp),
                                              fields['ip_country'])

    def _get_corpora(self, corplist):
        corpora = []
        for corp_group_hits in corplist.split(','):
            corp_group, _, group_hits = corp_group_hits.partition(':')
            if corp_group == '':
                continue
            if '[' in corp_group:
                corp_group = corp_group.rstrip(']')
                group, group_corp = corp_group.split('[')
                corpora.append('*' + group)
                for corp_maybe_hits in group_corp.split('+'):
                    corp, _, corp_hits = corp_maybe_hits.partition('/')
                    base_corp = corp.split('|')
                    corpora.extend(group + ':' + corp0 for corp0 in base_corp)
                    if corp_hits:
                        self._hit_counts.update(
                            dict((group + ':' + corp0, int(corp_hits))
                                 for corp0 in base_corp))
                if group_hits:
                    self._hit_counts['*' + group] = int(group_hits)
            else:
                corpora.extend(corp_group.split('|'))
            if group_hits:
                self._hit_counts[corp_group] = int(group_hits)
        return corpora

    def _get_addvalue(self, fields, corpus):
        return 1

    def make_table(self, groups_only=False):

        def get_values(corp, date):
            cell = self._cells[corp].get(date)
            if cell:
                values = cell.getvalue()
                return [str(values[key]) for key in ['fi', 'other', 'total']]
            else:
                return ['', '', '']

        def corpus_key(corp):
            return corp.lstrip('*')

        def make_corpus_label(corp):
            return re.sub(r'.*:', ' - ', corp)

        table = Table()
        table.add_cell('')
        cols = [col for year in self._years
                for col in [mon for mon in sorted(self._months[year])] + [year]]
        cols.append('Total')
        for col in cols:
            table.extend_row([col, '', ''])
        table.add_row([''])
        table.extend_row(['Fi', 'Oth', 'Tot'] * len(cols))
        corpora = ([corp for corp in self._corpora if ':' not in corp]
                   if groups_only else self._corpora)
        for corp in sorted(corpora, key=corpus_key) + ['Total']:
            table.add_row([make_corpus_label(corp)])
            for col in cols:
                table.extend_row(get_values(corp, col))
        return table

    def get_date_range(self):
        return self._first_date + '/' + self._last_date

    def __repr__(self):
        return repr(self._cells)


class StatsIP(Stats):

    def __init__(self, corpus_field=None):
        super(StatsIP, self).__init__(cell_class=StatsCellUnique,
                                      corpus_field=corpus_field)

    def _get_addvalue(self, fields, corpus):
        return fields['ip']


class StatsHits(Stats):

    def __init__(self):
        super(StatsHits, self).__init__(corpus_field='result_corpora')

    def add(self, fields):
        self._hit_counts = {}
        super(StatsHits, self).add(fields)

    def _get_addvalue(self, fields, corpus):
        return self._hit_counts.get(corpus, 0)


class KorpLogSummarizer(object):

    def __init__(self):
        self._stats = [
            ('query', 'Number of queries',
             Stats(corpus_field='query_corpora')),
            ('query_ip', 'Number of unique IPs for queries',
             StatsIP(corpus_field='query_corpora')),
            ('results', 'Number of results',
             Stats(corpus_field='result_corpora')),
            ('results_ip', 'Number of unique IPs for results',
             StatsIP(corpus_field='result_corpora')),
            ('result_hits', 'Number of result hits',
             StatsHits())
        ]

    def process_log(self, args):
        if len(args) > 0:
            for fname in args:
                with open(fname, 'r') as f:
                    self._process_log(f)
        else:
            self._process_log(sys.stdin)
        self._output_html()

    def _process_log(self, stream):
        csv.field_size_limit(int(1e7))
        log_reader = csv.DictReader(stream, delimiter='\t',
                                    quoting=csv.QUOTE_NONE)
        for fields in log_reader:
            for _, _, stat in self._stats:
                stat.add(fields)

    def _output_html(self):
        sys.stdout.write("""<!doctype html>
<html>
<head>
<style>
th {text-align: left; font-weight: normal;}
th.colhead {font-weight: bold;}
tr.group th {font-weight: bold;}
td {text-align: right;}
td.total {font-weight: bold;}
</style>
</head>
<body>
""")
        sys.stdout.write('<h1>Korp usage statistics summary for '
                         + self._stats[0][2].get_date_range() + '</h1>\n')
        for title, groups_only in [('Corpora', True), ('Subcorpora', False)]:
            sys.stdout.write('<h2>' + title + '</h2>\n')
            for stat_name, stat_title, stat in self._stats:
                sys.stdout.write('<h3>' + stat_title + '</h3>\n')
                sys.stdout.write(stat.make_table(groups_only).format_html()
                                 + '\n')
        sys.stdout.write("""
</body>
</html>
""")


def main():
    log_processor = KorpLogSummarizer()
    log_processor.process_log(sys.argv[1:])


if __name__ == '__main__':
    main()
