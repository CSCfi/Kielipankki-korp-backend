#! /usr/bin/env python


# korplogtsv-extract-params
#
# Extract individual query parameters from Korp backend log entries
# converted to TSV (with korplog2tsv).
#
# Usage: korplogtsv-extract-params korp-log.tsv > korp-log-params.tsv
#
# The script processes the value of the "params" field in the input
# and outputs for each parameter a line with three fields: log entry
# id, parameter name, parameter value.


import sys
import csv
import codecs

import korplog_util as util


encoding = 'utf-8'


class KorpLogParamsExtractor(object):

    def __init__(self):
        pass

    def process_log(self, args):
        if len(args) > 0:
            for fname in args:
                with open(fname, 'r') as f:
                    self._process_log(f)
        else:
            self._process_log(sys.stdin)

    def _process_log(self, stream):

        def quote_value(s):
            if '\n' in s or '\t' in s:
                return (s.replace('\\', '\\\\').replace('\n', '\\n')
                        .replace('\t', '\\t'))
            else:
                return s

        def write_field(writer, fields, param_name, value):
            fields['param'] = param_name
            value = quote_value(value)
            if isinstance(value, unicode):
                value = value.encode(encoding)
            fields['value'] = value
            out_writer.writerow(fields)

        csv.field_size_limit(int(1e7))
        log_reader = csv.DictReader(stream, delimiter='\t',
                                    quoting=csv.QUOTE_NONE)
        in_fields = log_reader.fieldnames
        out_fields = ['id', 'param', 'value']
        out_writer = csv.DictWriter(
            sys.stdout, out_fields, delimiter='\t',
            quoting=csv.QUOTE_NONE, doublequote=False, quotechar='',
            extrasaction='ignore')
        out_writer.writeheader()
        for fields in log_reader:
            if 'id' not in fields:
                fields['id'] = util.make_logentry_id(fields)
            try:
                params = eval(fields['params'])
            except SyntaxError:
                write_field(
                    out_writer, fields, 'UNPARSED_PARAMS', fields['params'])
            else:
                for param_name in sorted(params.keys()):
                    write_field(
                        out_writer, fields, param_name, params[param_name])


def main():
    extractor = KorpLogParamsExtractor()
    extractor.process_log(sys.argv[1:])


if __name__ == '__main__':
    main()
