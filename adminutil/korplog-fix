#! /usr/bin/env python


# korplog-fix
#
# Fix lines in Korp backend log files that have been split by another
# log entry line written by another process.
#
# Usage: korplog-fix [<] korp-cgi.log > korp-cgi-fixed.log
#
# Note that the script does not work (and it is in general impossible
# to make it work) in cases where one continuation line has been split
# by another continuation line, which may happen with long lines. Such
# cases should be avoided, which would probably require using either
# log file locking in korp.cgi or a separate logging server process.


import sys
import re


class KorpLogFixer(object):

    def __init__(self):
        pass

    def process_log(self, args):
        if len(args) > 0:
            for fname in args:
                with open(fname, 'r') as f:
                    self._process_log(f)
        else:
            self._process_log(sys.stdin)

    def _process_log(self, stream):

        def combine_split_line(parts):
            combined = '\n'.join(parts)
            binary = (re.search(r'[\x00-\x09\x0b-\x1f\x7f-\xff]', combined)
                      is not None)
            return (repr(combined) if binary else combined) + '\n'

        entry_begin_re = r'\[[\w.]+ \d+ [A-Z]+ @ 20\d\d-\d\d-\d\d'
        interrupted_re = '.' + entry_begin_re
        interrupted_line = None
        prev_line = None
        prev_value = None
        entry_head = None
        for line in stream:
            mo = re.match(entry_begin_re, line)
            if not mo:
                if interrupted_line:
                    line = interrupted_line + line
                    interrupted_line = None
                elif prev_line:
                    if not prev_value:
                        mo2 = re.match(r'(.*DEBUG @ .+?\] .+?: )(.+)',
                                       prev_line)
                        if mo2:
                            entry_head, value_first_line = mo2.groups()
                            prev_value = [value_first_line]
                        else:
                            sys.stderr.write(
                                'Warning: line does not look like a log'
                                ' entry nor is a previous interrupted'
                                ' line nor DEBUG entry found:\n' + line)
                    if prev_value:
                        prev_value.append(line[:-1])
                        continue
            # NOTE: This assumes that a line may contain at most one
            # beginning of a new log line. If there would be more, it
            # would probably be impossible to append the continuation
            # line(s) to the correct log lines.
            mo = re.search(interrupted_re, line)
            if mo:
                start = mo.start() + 1
                interrupted_line = line[:start]
                line = line[start:]
            if prev_line:
                if prev_value:
                    prev_line = entry_head + combine_split_line(prev_value)
                    prev_value = None
                sys.stdout.write(prev_line)
            prev_line = line
        if prev_line:
            sys.stdout.write(prev_line)


def main():
    log_processor = KorpLogFixer()
    log_processor.process_log(sys.argv[1:])


if __name__ == '__main__':
    main()
